:const ninja_speed_left -2
:const ninja_speed_right 2
:const ninja_speed_down 4

: screen_pos
: screen_y 4
: screen_x 3

: ninja_current_pos
	16 16

: ninja_current_animation_frame
	0
: ninja_current_dir
	0
: ninja_jump_counter	#do not move it, current_dir reads it
	0
: ninja_falling			#do not move it, reading 3 registers at once
	4 #speed down
: ninja_can_jump
	1
: ninja_flappy_mode #do not move, reading with can_jump
	0
: ninja_action_state
	0

:const ninja_jump_ticks 8
:const ninja_jump_y_min -18

: ninja_jump_table
	0 6 6 4 2 -2 -4 -6 -6

: ninja_last_dir
	2

: ninja_process_input
	v2 := 0
	v1 := 7		# A - left
	if v1 key then
		v2 += ninja_speed_left

	v1 := 9		# D - jump
	if v1 key then
		v2 += ninja_speed_right

	v1 := 5		# W - jump
	if v1 key begin
		i := ninja_can_jump
		load v4 - v5 #can jump, flappy mode
		v4 |= v5
		if v4 != 0 begin
			v4 := 0
			save v4 - v4
			i := ninja_jump_counter
			load v1 - v1

			if v5 != 0 then #flappy mode, restart jump
				v1 := 0

			if v1 == 0 begin
				save v1 - v1
				v1 := ninja_jump_ticks
				save v1 - v1
				i := long ninja_jump_sound
				audio
				v3 := 2
				buzzer := v3
			end
		end
	end

	i := ninja_action_state
	load v3 - v3
	if v3 >= 2 begin
		v1 := 0x0b
		v4 := 0
		if v1 -key then
			v4 += 1
		v1 := 0x0e
		if v1 -key then
			v4 += 1
		v1 := 0x0f
		if v1 -key then
			v4 += 1

		if v4 == 3 then #if all keys are released, 2 -> 0
			v3 := 0
		save v3 - v3
	end
	if v3 == 0 begin
		v1 := 0x0b
		if v1 key then
			v3 := 1
		v1 := 0x0e
		if v1 key then
			v3 := 1
		v1 := 0x0f
		if v1 key then
			v3 := 1

		save v3 - v3
	end

	i := ninja_current_dir
	save v2 - v2
	return

: ninja_tick
	i := ninja_current_dir
	load vc - ve

	v0 := vc
	v0 |= vd
	v0 |= ve

	if v0 == 0 begin
		i := ninja_action_state
		load v0 - v0
		if v0 == 1 then
			objects_collide
		return
	end

	ninja_draw

	i := ninja_current_pos
	load va - vb

	v9 := 16 #collision probe offset, freefall, under feet

	#jump height
	if vd != 0 begin
		i := ninja_jump_table
		i += vd
		load ve - ve
		vd += -1
		i := ninja_jump_counter
		save vd - vd
		vd += 1 #keep current jump counter
		v0 := 0x80
		v0 &= ve
		if v0 != 0 then #negative offset, going up
			v9 := 0
	end

	if vd == 0 begin
		ve := ninja_speed_down
	end

	if v9 == 0 then
		jump ninja_jump_up

	i := ninja_last_dir
	load v8 - v8

	if v8 == ninja_speed_left then
		va += 7
	va += vc
	vb += ve
	vb += v9

	map_is_wall

	vb -= v9
	vb -= ve
	va -= vc
	if v8 == ninja_speed_left then
		va += -7

	if v0 != 0 begin #hit wall under ninja's feet, align y to next block
		vb += 7
		v1 := 0xf8
		vb &= v1
		ve := 0
		i := ninja_can_jump
		v1 := 1
		save v1 - v1
	end

: ninja_jump_up

	i := ninja_falling
	if ve != 0 then
		v0 := ninja_speed_down
	if ve == 0 then
		v0 := 0
	save v0 - v0

	if vc != 0 begin
		i := ninja_last_dir
		save vc - vc
	end

	if vc == ninja_speed_right then
		va += 7

	if v9 == 0 then #jump up
		ve += 16
	if v9 != 0 then
		ve += 8
	va += vc
	vb += ve
	map_is_wall
	vb -= ve #skip restore here?
	va -= vc
	if v9 == 0 then #jump up
		ve += -16
	if v9 != 0 then
		ve += -8

	if vc == ninja_speed_right then
		va += -7

	vb += ve

	i := ninja_current_pos
	save va - vb

	if v0 == 0 begin
		va += vc
		save va - vb

		if va >= 0x80 begin #left (negative)
			map_scroll_left
			jump ninja_tick_exit
		end

		if va == 0 begin #left == 0
			map_scroll_left
			jump ninja_tick_exit
		end

		if va >= 120 begin
			map_scroll_right
			jump ninja_tick_exit
		end

		if vb >= 0x80 begin #up (negative)
			if vb < ninja_jump_y_min then #
				map_scroll_up
			jump ninja_tick_exit
		end

		if vb >= 56 begin #down
			map_scroll_down
			jump ninja_tick_exit
		end

	end

: ninja_tick_exit
	ninja_next_animation
	ninja_draw
	if v0 != 0 then
		objects_collide
	return

: ninja_action_ok
	i := ninja_action_state
	vf := 3
	save vf - vf
	return

: ninja_action_finish
	i := ninja_action_state
	load v0 - v0 #1 - pressed now, 3 - processed
	if v0 != 1 then
		return

	v0 := 2
	save v0 - v0

	i := long ninja_bad_action_sound
	audio
	v1 := 4
	buzzer := v1
	return

: ninja_next_animation
	i := ninja_current_animation_frame
	load v0 - v0
	v0 += 1
	if v0 >= 4 then
		v0 := 0
	save v0 - v0
	return

: ninja_draw
	i := ninja_current_pos
	load va - vb
	i := ninja_current_animation_frame
	load v6 - v6
	if v6 == 3 then
		v6 := 1

	v6 += v6
	v6 += v6
	v6 += v6
	v6 += v6

	i := ninja_current_pos
	load v1 - v2

	i := ninja_last_dir
	load v3 - v3

	v4 := 0
	if v3 != ninja_speed_right then #left
		v4 := 48

	v5 := 0x80
	v5 &= v2
	v0 := 0

	if v5 == 0 begin
		i := long tile_ninja_0_0
		i += v6
		i += v4
		sprite v1 v2 8
		v0 |= vf
	end

	v2 += 8

	v5 := 0x80
	v5 &= v2

	if v5 == 0 begin
		i := long tile_ninja_1_0
		i += v6
		i += v4
		sprite v1 v2 8
		v0 |= vf
	end

	return

: ninja_respawn_position
	4 4 32 40

: ninja_respawn
	i := ninja_respawn_position

: ninja_spawn
	load v0 - v3
	i := screen_pos
	save v0 - v1
	i := ninja_current_pos
	save v2 - v3
	va := 1
	jump set_redraw_flag
